#!/usr/bin/env python3.9

# This file implements the scoring service shell. It starts nginx and gunicorn
# with the correct configurations and then waits until gunicorn exits.

from __future__ import print_function
import multiprocessing
import os
import signal
import subprocess
import sys

# Get the number of CPU cores
cpu_count = multiprocessing.cpu_count()

# Set default values for environment variables
model_server_timeout = int(os.environ.get("MODEL_SERVER_TIMEOUT", 120))
model_server_workers = int(os.environ.get("MODEL_SERVER_WORKERS", cpu_count))


def sigterm_handler(nginx_pid, gunicorn_pid):
    # Function to handle termination signals and gracefully shut down subprocesses
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def start_server():
    # Start the inference server with specified workers

    # Print the number of workers
    print("Starting the inference server with {} workers.".format(model_server_workers))

    # Link the log streams to stdout/err so they will be logged to the container logs
    subprocess.check_call(["ln", "-sf", "/dev/stdout", "/var/log/nginx/access.log"])
    subprocess.check_call(["ln", "-sf", "/dev/stderr", "/var/log/nginx/error.log"])

    # Start nginx and gunicorn subprocesses
    nginx = subprocess.Popen(["nginx", "-c", "/app/program/nginx.conf"])
    gunicorn = subprocess.Popen(["gunicorn",
                                 "--timeout", str(model_server_timeout),
                                 "-k", "gevent",
                                 "-b", "unix:/tmp/gunicorn.sock",
                                 "-w", str(model_server_workers),
                                 "wsgi:app"])

    # Set up signal handler for termination signals
    signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

    # If either subprocess exits, exit the main loop
    pids = set([nginx.pid, gunicorn.pid])
    while True:
        pid, _ = os.wait()
        if pid in pids:
            break

    # Handle termination and print a message
    sigterm_handler(nginx.pid, gunicorn.pid)
    print("Inference server exiting")


if __name__ == "__main__":
    # Execute the start_server function when the script is run
    start_server()
